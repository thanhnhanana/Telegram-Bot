import telebot
import time
import os
import zipfile
from urllib.parse import urlparse
from telebot import types
import requests
import psutil
import json
import random
nigger = "6403865422:AAFUPF6hVl921pNCuO3UnZHg6xDyrkoijVM"
linkbuoi = "https://t.me/sieunhansex"
idad = "5990807551"
bot = telebot.TeleBot(nigger)
@bot.message_handler(commands=["help"])
def buoi(message):
	danhsach = [
		"/attack - [Host] [Time] [Methods] | L·ªánh ddos free",
		"/methods - Methods ddos",
		"/profile - xem profile c·ªßa b·∫°n",
		"/check - D√πng ƒë·ªÉ check website",
		"/ask - D√πng ƒë·ªÉ h·ªèi gemini ai",
		"/askv2 - Api th·ª© 2",
		"/admin - Th√¥ng tin owner v√† developer",
		"/proxies - get proxyscrape",
		"/informationmanager - Xem th√¥ng tin c·ªßa admin v√† owner",
		"/anime - random 1 b·ª©c ·∫£nh anime",
		"/status - Xem th√¥ng tin vps",
		"/install - t·∫£i m·ªôt s·ªë th·ª©"
	]
	concac = "Danh s√°ch l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng: \n"
	for cailon in danhsach:
		concac += cailon + "\n"
	bot.reply_to(message, concac)
@bot.message_handler(commands=['start'])
def buoi(message):
        bot.reply_to(message, "Danh s√°ch c√°c l·ªánh:\n/help: xem c√°c l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng");
@bot.message_handler(commands=["methods"])
def buoi(message):
	method = [
		"FLOOD | Free",
		"TCPRAW | FREE",
		"",
		"TLS | VIP",
		"RAPIDRESET | VIP",
		"HTTP2 | VIP",
		"TLSV2 | VIP",
		"TCPFAMOD | VIP",
	]
	phonglon = "Danh s√°ch methods:\n"
	for ngu in method:
		phonglon += ngu + "\n"
	bot.reply_to(message, phonglon)
@bot.message_handler(commands=["check"])
def buoi(message):
	try:
		url = message.text.split(" ")[1]
	except IndexError:
		bot.reply_to(message, "üö´ Sai c√°ch s·ª≠ d·ª•ng, /check <target>")
		return
	try:
		cac = requests.get(url)
		print(cac.headers)
		protocol = urlparse(cac.request.url).scheme
		response = cac.status_code
		authority = urlparse(url).hostname
		date = cac.headers["Date"]
		scheme = urlparse(url).scheme
		path = cac.headers.get("path")
		isp = cac.headers.get("Server", "Invalid")
		domain = cac.headers.get("Domain", "Invalid")
		xamlon = f"Host: {authority}\nProtocol: {protocol}\nResponse: {response}\nScheme: {scheme}\nPath: {path}\nISP: {isp}\nDate: {date}\nDomain: {domain}"
		bot.reply_to(message, xamlon)
	except requests.exceptions.RequestException:
		bot.reply_to(message, "Hostname kh√¥ng t·ªìn t·∫°i")
#@bot.message_handler(commands=["register"])
#def buoi(message):
#	idng = message.from_user.id
#	username = message.from_user.username
#	if (idng == 7338336630):
#		bot.reply_to(message, "üö´ ƒê√©o ti·∫øp r√°c,v√¥ h·ªçc th·ª©c!")
#	try:
#		with open("user.json", "r") as file:
#			usex = json.load(file)
##	except FileNotFoundError:
#		print("T·∫°o file ƒëi th·∫±ng nguuu")
#		exit()
#	check = next((usex for usex in usex if usex["id"] == idng), None)
#	if check:
#		bot.reply_to(message, "üö´ B·∫°n ƒë√£ c√≥ t√†i kho·∫£n,kh√¥ng th·ªÉ t·∫°o th√™m")
#	else:
#		newus = {
#			"id": idng,
#			"username": username,
#			"VIP": False,
#		}
##		usex.insert(index, newus)
#		with open("user.json", "w") as file:
#			json.dump(usex, file)
#		if (idng == 5544589325):
#			bot.reply_to(message, "Cute th√≠a")
#		bot.reply_to(message, f"T·∫°o t√†i kho·∫£n th√†nh c√¥ng ‚úÖ\nTh√¥ng tin t√†i kho·∫£n:\nID: {idng}\nUsername: {username}\nVIP: False")
@bot.message_handler(commands=["profile"])
def buoi(message):
	try:
		if message.reply_to_message and message.reply_to_message.from_user:
			id = message.reply_to_message.from_user.id
			username = message.reply_to_message.from_user.username
			name = message.reply_to_message.from_user.first_name
			bio = message.reply_to_message.from_user.bio if hasattr(message.reply_to_message.from_user, 'bio') else "Bio not available"
		else:
			args = message.text.split(" ")
			if len(args) > 1:
				ditloncode = args[1]
				if ditloncode.startswith("@"):
					ditloncode = ditloncode[1:]
					loncd = bot.get_chat(ditloncode)
					if loncd:
						try:
							id = loncd.id
							username = loncd.username
							name = loncd.first_name
							bio = loncd.bio if hasattr(loncd, 'bio') else "Bio not available"
						except telebot.apihelper.ApiTelegramException as e:
							if "chat not found" in e.message:
								bot.reply_to(message, "üö´ Kh√¥ng th·ªÉ get th√¥ng tin ng∆∞·ªùi d√πng n√†y")
								return
				else:
					bot.reply_to(message, "üö´ Username kh√¥ng t·ªìn t·∫°i")
					return
			else:
				id = message.from_user.id
				username = message.from_user.username
				name = message.from_user.first_name
				bio = message.from_user.bio if hasattr(message.from_user, 'bio') else "Bio not available"
		bot.reply_to(message, f"`‚öñ Th√¥ng tin ng∆∞·ªùi d√πng ‚öñ:\nID: {id}\nUsername: {username}\nName: {name}\nBio: {bio}`", parse_mode="MarkdownV2")
	except telebot.apihelper.ApiTelegramException as e:
		bot.reply_to(message, "üö´ Kh√¥ng th·ªÉ get th√¥ng tin ng∆∞·ªùi d√πng n√†y")
		return
def postcauhoi(cauhoi):
	phongnguchibietbucudauhang = {
		"contents": [
			{
				"parts": [
					{
						"text": cauhoi
					}
				]
			}
		]
	}
	upcauhoi = requests.post("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyDMnyPdgAbctOMwx0pnXKDyR3bldXAzhaA", json= phongnguchibietbucudauhang)
	if upcauhoi.status_code == 200:
		dapan = upcauhoi.json()
		skibidi = dapan["candidates"][0]["content"]["parts"][0]["text"]
		return skibidi
@bot.message_handler(commands=["ask"])
def buoi(message):
	cauhoi = message.text.split(" ", 1)
	if len(cauhoi) < 2:
		bot.reply_to(message, "Baby √†,em ph·∫£i nh·∫≠p c√¢u h·ªèi sau l·ªánh ask ch·ª©!")
		return
	up = postcauhoi(cauhoi[1])
	sex = bot.reply_to(message, "‚è≥ƒê·ª£i ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi ...")
	time.sleep(3)
	bot.delete_message(chat_id=message.chat.id, message_id=sex.message_id)
	bot.reply_to(message, f"üå∏ ƒê√°p √°n:\n{up}")
@bot.message_handler(commands=["admin"])
def buoi(message):
	phongnguchibietbucuxintha = types.InlineKeyboardMarkup(row_width=1)
	dev = types.InlineKeyboardButton("‚òï developer personal page ‚òï", url="t.me/imWiliams")
	owner = types.InlineKeyboardButton("üöÄ Owner üöÄ", url="t.me/nminhniee")
	group1 = types.InlineKeyboardButton("üß∏powerproof channel üß∏", url="t.me/Famod_Channel")
	group2 = types.InlineKeyboardButton("üç∑ Messaging channel üç∑", url="t.me/Famod_Service")
	phongnguchibietbucuxintha.add(dev, owner, group1, group2)
	bot.reply_to(message, "Th√¥ng tin admin v√† developer:", reply_markup=phongnguchibietbucuxintha)
user_state = {}
@bot.message_handler(commands=["proxies"])
def buoi(message):
    vanhgay = types.InlineKeyboardMarkup()
    vanhgay.row(
        types.InlineKeyboardButton("üç¨ socks4 üç¨", callback_data="socks4"),
        types.InlineKeyboardButton("üõ∞Ô∏è socks5 üõ∞Ô∏è", callback_data="socks5"),
    )
    vanhgay.row(
        types.InlineKeyboardButton("üéÑhttp üéÑ", callback_data="http"),
        types.InlineKeyboardButton("üåç all üåç", callback_data="all"),
    )
    bot.send_message(message.chat.id, "üí¶ Ch·ªçn protocol üí¶:", reply_markup=vanhgay)

@bot.callback_query_handler(func=lambda call: call.data in ["socks4", "socks5", "http", "all"])
def protocol_chosen(call):
    protocolchose = call.data
    user_state[call.message.chat.id] = {'protocol': protocolchose}
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    vanhngu = types.InlineKeyboardMarkup()
    for i in range(1, 11):
        vanhngu.row(types.InlineKeyboardButton(str(i * 1000), callback_data=str(i * 1000)))
    bot.send_message(call.message.chat.id, "‚è∞ ch·ªçn timeout ‚è∞:", reply_markup=vanhngu)

@bot.callback_query_handler(func=lambda call: call.data.isdigit())
def timeout_chosen(call):
    timeoutchose = call.data
    user_state[call.message.chat.id]['timeout'] = timeoutchose
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    xukacodderngunhucho = types.InlineKeyboardMarkup()
    xukacodderngunhucho.row(
        types.InlineKeyboardButton("üëë Yes üëë", callback_data="yes"),
        types.InlineKeyboardButton("üå¥ No üå¥", callback_data="no"),
        types.InlineKeyboardButton("‚ùÑÔ∏è All ‚ùÑ", callback_data="all"),
    )
    bot.send_message(call.message.chat.id, "üå¥ Vui l√≤ng ch·ªçn ssl üå¥: ", reply_markup=xukacodderngunhucho)

@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no", "all"])
def ssl_chosen(call):
    sslchose = call.data
    user_state[call.message.chat.id]['ssl'] = sslchose
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    ngao = bot.send_message(call.message.chat.id, "‚è≥Vui l√≤ng ƒë·ª£i ƒë·ªÉ l·∫•y proxy ‚è≥")
    time.sleep(4)

    state = user_state[call.message.chat.id]
    protocol = state['protocol']
    timeout = state['timeout']
    ssl = state['ssl']
    proxies = requests.get(
        f"https://api.proxyscrape.com/v2/?request=displayproxies&protocol={protocol}&timeout={timeout}&country=all&ssl={ssl}&anonymity=all"
    ).text

    with open("proxies.txt", "w") as file:
        file.write(proxies)

    bot.delete_message(chat_id=call.message.chat.id, message_id=ngao.message_id)

    password = "".join(random.choice("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") for _ in range(8))
    with zipfile.ZipFile("proxies.zip", "w") as zip_file:
        zip_file.write("proxies.txt")
        zip_file.setpassword(password.encode())

    bot.send_document(
        call.message.chat.id, 
        open("proxies.zip", "rb"), 
        caption=f"üå¥ Th√¥ng tin chi ti·∫øt:\nüåø S·ªë proxy üåø: {len(proxies.splitlines())}\nüçÅTimeout üçÅ: {timeout}\nüçá Ssl üçá: {ssl}\nüîíPassword üîí: {password}"
    )
    del user_state[call.message.chat.id]
def postcauhoiv2(cauhoi):
	phongnguchibietbucudauhang = {
		"contents": [
			{
				"parts": [
					{
						"text": cauhoi
					}
				]
			}
		]
	}
	upcauhoi = requests.post("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyCXqgUyrwyrzvrNcd7FITHPL6eFYiIF3JQ ", json= phongnguchibietbucudauhang)
	if upcauhoi.status_code == 200:
		dapan = upcauhoi.json()
		skibidi = dapan["candidates"][0]["content"]["parts"][0]["text"]
		return skibidi
@bot.message_handler(commands=["askv2"])
def buoi(message):
	cauhoi = message.text.split(" ", 1)
	if len(cauhoi) < 2:
		bot.reply_to(message, "Baby √†,em ph·∫£i nh·∫≠p c√¢u h·ªèi sau l·ªánh ask ch·ª©!")
		return
	up = postcauhoiv2(cauhoi[1])
	sex = bot.reply_to(message, "‚è≥ƒê·ª£i ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi ...")
	time.sleep(3)
	bot.delete_message(chat_id=message.chat.id, message_id=sex.message_id)
	bot.reply_to(message, f"üå∏ ƒê√°p √°n:\n{up}")
@bot.message_handler(commands=["informationmanager"])
def buoi(message):
	if message.chat.type == "private":
		bot.reply_to(message, "üö´ C√¢u l·ªánh n√†y kh√¥ng th·ªÉ d√πng ƒë∆∞·ª£c khi nh·∫Øn ri√™ng ƒë√¢u c√¥ b√© √† üö´")
		return
	try:
		phongnguchibucuxindauhang = message.chat.id
		owad = bot.get_chat_administrators(phongnguchibucuxindauhang)
		if not owad:
			bot.reply_to(message, "üö´ T·∫°i sao ph·∫£i l√†m b·ªë trong khi ta c√≥ th·ªÉ b·ªè con?")
			return
		thnguxuka = ""
		for phongngu in owad:
			if phongngu.status in ["creator", "administrator"]:
				thnguxuka += f"üí§ T√™n: {phongngu.user.first_name}\n"
				thnguxuka += f"üöÄ ID Telegram üöÄ: {phongngu.user.id}\n"
				thnguxuka += f"üç∑ Username üç∑: @{phongngu.user.username}\n"
		if thnguxuka:
			bot.reply_to(message, f"`{thnguxuka}`", parse_mode="MarkdownV2")
		else:
			bot.reply_to(message, "üö´ Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin c·ªßa 2 th·∫±ng ngu owner v√† admin üö´")
	except:
		bot.reply_to(message, "üö´ Jack 5 c·ªß b·ªè con ‚ù§ L√¥n ph√≤ng üö´")
@bot.message_handler(commands=["anime"])
def buoi(message):
	linkanh = [
		"https://i.pinimg.com/236x/d3/8c/c7/d38cc72d3f35fadc1b1a1f5e2c21eea1.jpg",
		"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR4H-LSWWxrTndrqiXCDkyxhwjVErOx862rMg&usqp=CAU",
		"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSG4y83tdO41FW-tqirmMh2PWNtPDMWDsnugw&usqp=CAU",
		"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNwX09mJD7upbMp9xRwxJpa5r-MVUqRv9zow&s",
		"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9KDVnsojTPLmqg7nX1WMEmyC1hv5yt8T5ZA&usqp=CAU",
		"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRLONOR1xIvsJI-Ih7_XmHBPuetPn64bEwRyQ&usqp=CAU",
		"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTiPg89-F-AsKdM5Tw-U2oAHDpM7-rxGzc7-A&usqp=CAU",
		"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSlbLMOQJkhe8GnuKT5g5-fVOyx3c1ycCbEKQ&usqp=CAU",
		"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRXen8XriobQuTTcHVqr3x3z6DR7vUISopewA&usqp=CAU",
	]
	chonanh = random.choice(linkanh)
	taianh = requests.get(chonanh)
	if taianh.status_code == 200:
		with open("nigger.jpg", "wb") as file:
			file.write(taianh.content)
		with open("nigger.jpg", "rb") as file:
			bot.send_photo(message.chat.id, file, caption="‚ù§ ·∫¢nh anime c·ªßa b·∫°n ƒë√£ random xong ‚ù§")
	else:
		bot.reply_to(message, "üö´ Kh√¥ng th·ªÉ t·∫£i ·∫£nh anime")
@bot.message_handler(commands=["status"])
def buoi(message):
	ram = psutil.virtual_memory()
	ramdung = ram.used / (1024 ** 3)
	tatcaram = ram.total / (1024 ** 3)
	phantram = (ram.used / ram.total) * 100
	guitinnhan = (
		f"üìä Th√¥ng tin v·ªÅ ram üìä:\n"
		f"üöÄ Ram ƒë√£ d√πng üöÄ: {ramdung:.2f} GB\n"
		f"üöÄ T·∫•t c·∫£ ram üöÄ: {tatcaram:.2f} GB\n"
		f"üöÄ Ph·∫ßn trƒÉm ram ƒë√£ d√πng üöÄ: {phantram:.2f}%"
	)
	bot.reply_to(message, guitinnhan)
@bot.message_handler(content_types=["new_chat_members"])
def buoicaclondai(message):
	for ngdungmoi in message.new_chat_members:
		ten = ngdungmoi.first_name
		if ngdungmoi.last_name:
			ten += f"{ngdungmoi.last_name}"
		tennhom = message.chat.title
		bot.send_video(message.chat.id, open("chaomung.mp4", "rb"), caption=f"Ch√†o m·ª´ng {ten} ƒë√£ t·ªõi nh√≥m {tennhom}")
@bot.message_handler(content_types=["left_chat_member"])
def buoicaclondai(message):
	roinhom = message.left_chat_member
	ten = roinhom.first_name
	if roinhom.last_name:
		ten += f"{roinhom.last_name}"
	tennhom = message.chat.title
	bot.send_video(message.chat.id, open("roinhom.mp4", "rb"), caption=f"üîÜ T·∫°m bi·ªát {ten} ƒë√£ r·ªùi kh·ªèi nh√≥m {tennhom},ch√∫c b·∫°n lu√¥n kh·ªèe m·∫°nh üòä")
#@bot.message_handler()
#def lonbuoicacdai(message):
#	status = message.new_chat_member
#	if status.status == "kicked":
#		kick = status_user
#		ten = kick.first_name
#		if kick.last_name:#
#			ten += f"{kick.last_name}"
#		tennhom = message.chat.title
#	bot.send_video(message.chat.id, open("kick.mp4", "rb"), caption=f"üîÜ ng∆∞·ªùi d√πng {ten} ƒë√£ b·ªã kick kh·ªèi nh√≥m {tennhom}")
@bot.message_handler(commands=["install"])
def buoi(message):
	phongngu = types.InlineKeyboardMarkup()
	ddos = types.InlineKeyboardButton("üöÄ Script ddos üöÄ", callback_data="scriptddos")
	tool = types.InlineKeyboardButton("üí† Tool TDS üí†", callback_data="tds")
	prx = types.InlineKeyboardButton("üå¥ Proxy üå¥", callback_data="proxy")
	sim = types.InlineKeyboardButton("‚ùÑ Tool spam sms ‚ùÑ", callback_data="sms")
	tele = types.InlineKeyboardButton("üß∏ Source bot telegram üß∏", callback_data="telegram")
	src2 = types.InlineKeyboardButton("üõ∞Ô∏è Source C2 üõ∞Ô∏è", callback_data="c2")
	tik = types.InlineKeyboardButton("üåç Tiktok üåç", callback_data="tiktok")
	phongngu.add(ddos)
	phongngu.add(src2)
	phongngu.add(tool)
	phongngu.add(prx)
	phongngu.add(sim)
	phongngu.add(tele, tik)
	bot.reply_to(message, " üöÄ Ch·ªçn l·ª±a ch·ªçn sau üöÄ:", reply_markup=phongngu)
@bot.callback_query_handler(func=lambda call: True)
def call(call):
	if call.data == "scriptddos":
		sex = types.InlineKeyboardMarkup()
		layer7 = types.InlineKeyboardButton("üëë Layer 7 üëë", callback_data="l7")
		layer4 = types.InlineKeyboardButton("üöÄ Layer 4 üöÄ", callback_data="l4")
		sex.add(layer7)
		sex.add(layer4)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üåç Vui l√≤ng ch·ªçn layer üåç:",reply_markup=sex)
	elif call.data == "l7":
		oc = types.InlineKeyboardMarkup()
		storm = types.InlineKeyboardButton("üí• Storm üí•", callback_data="nm1")
		mars = types.InlineKeyboardButton("üöÄ HTTP-MARS üöÄ", callback_data="nm2")
		h2 = types.InlineKeyboardButton("üöÄ H2 üöÄ", callback_data="nm3")
		tls = types.InlineKeyboardButton("üöÄ TLS üöÄ", callback_data="nm4")
		tlsv2 = types.InlineKeyboardButton("üöÄ TLS SUPER üöÄ", callback_data="nm5")
		reset = types.InlineKeyboardButton("üöÄ Rapid Reset üöÄ", callback_data="nm6")
		bypass = types.InlineKeyboardButton("üöÄ Bypass üöÄ", callback_data="nm7")
		oc.add(storm, mars)
		oc.add(h2, tls)
		oc.add(tlsv2, reset)
		oc.add(bypass)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üç∑ Vui l√≤ng ch·ªçn methods üç∑:", reply_markup=oc)
	elif call.data == "nm1":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer7/storm.js", "rb"), caption="‚ùÑ ƒê√¢y l√† script c·ªßa b·∫°n ‚ùÑ")
	elif call.data == "nm2":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer7/HTTP-MARS.js"), caption="‚ùÑ ƒê√¢y l√† script c·ªßa b·∫°n ‚ùÑ")
	elif call.data == "nm3":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer7/h2.js", "rb"), caption="‚ùÑ ƒê√¢y l√† script c·ªßa b·∫°n ‚ùÑ")
	elif call.data == "nm4":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer7/tls.js", "rb"), caption="‚ùÑ ƒê√¢y l√† script c·ªßa b·∫°n ‚ùÑ")
	elif call.data == "nm5":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer7/tls-super.js", "rb"), caption="‚ùÑ ƒê√¢y l√† script c·ªßa b·∫°n ‚ùÑ")
	elif call.data == "nm6":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer7/rapid-reset.js", "rb"), caption="‚ùÑ ƒê√¢y l√† script c·ªßa b·∫°n ‚ùÑ")
	elif call.data == "nm7":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer7/bypass.js", "rb"), caption="‚ùÑ ƒê√¢y l√† script c·ªßa b·∫°n ‚ùÑ")
	if call.data == "l4":
		ngu = types.InlineKeyboardMarkup()
		tp = types.InlineKeyboardButton("üöÄ TCP üöÄ", callback_data="tcp")
		ov = types.InlineKeyboardButton("üöÄ TCP-OVH üöÄ", callback_data="ovh")
		ud = types.InlineKeyboardButton("üöÄ UDP üöÄ", callback_data="udp")
		ac = types.InlineKeyboardButton("üöÄ ACK üöÄ", callback_data="ack")
		ngu.add(tp, ov)
		ngu.add(ud, ac)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üç∑ Ch·ªçn 1 methods üç∑", reply_markup=ngu)
	elif call.data == "tcp":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer4/TCP", "rb"), caption="üç∑ƒê√¢y l√† script c·ªßa b·∫°n üç∑")
	elif call.data == "ovh":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer4/tcp-ovh.c", "rb"), caption="üç∑ƒê√¢y l√† script c·ªßa b·∫°n üç∑")
	elif call.data == "udp":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer4/UDP", "rb"), caption="üç∑ƒê√¢y l√† script c·ªßa b·∫°n üç∑")
	elif call.data == "ack":
		bot.send_document(call.message.chat.id, open("stable/script_ddos/layer4/ACK", "rb"), caption="üç∑ƒê√¢y l√† script c·ªßa b·∫°n üç∑")
	if call.data == "tds":
		skid = types.InlineKeyboardMarkup()
		s1 = types.InlineKeyboardButton("üöÄ TOOL TDS üöÄ", callback_data="sex1")
		s2 = types.InlineKeyboardButton("üöÄ ZYTHTOOL üöÄ", callback_data="sex2")
		s3 = types.InlineKeyboardButton("üöÄ XUATDEV üöÄ", callback_data="sex3")
		s4 = types.InlineKeyboardButton("üöÄ VLONG üöÄ", callback_data="sex4")
		s5 = types.InlineKeyboardButton("üöÄ CTOOL üöÄ", callback_data="sex5")
		skid.add(s1, s2)
		skid.add(s3, s4)
		skid.add(s5)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚òÑ Ch·ªçn m·ªôt trong nh·ªØng ng∆∞·ªùi l√†m tool sau ‚òÑ:", reply_markup=skid)
	elif call.data == "sex1":
		bot.send_document(call.message.chat.id, open("stable/tool/tds.7z", "rb"), caption="üç∑ƒê√¢y l√† tool c·ªßa b·∫°n üç∑")
	elif call.data == "sex2":
		bot.send_document(call.message.chat.id, open("stable/tool/zythtool.7z", "rb"), caption="üç∑ƒê√¢y l√† tool c·ªßa b·∫°n üç∑")
	elif call.data == "sex3":
		bot.send_document(call.message.chat.id, open("stable/tool/xuatdev.7z", "rb"), caption="üç∑ƒê√¢y l√† tool c·ªßa b·∫°n üç∑")
	elif call.data == "sex4":
		bot.send_document(call.message.chat.id, open("stable/tool/vlong.7z", "rb"), caption="üç∑ƒê√¢y l√† tool c·ªßa b·∫°n üç∑")
	elif call.data == "sex5":
		bot.send_document(call.message.chat.id, open("stable/tool/ctool.7z", "rb"), caption="üç∑ƒê√¢y l√† tool c·ªßa b·∫°n üç∑")
	if call.data == "proxy":
		bot.send_document(call.message.chat.id, open("stable/proxy/proxies.txt", "rb"), caption="üîÜ ƒê√¢y l√† proxies c·ªßa b·∫°n üîÜ")
	if call.data == "telegram":
		j97 = types.InlineKeyboardMarkup()
		ddos = types.InlineKeyboardButton("üìà SOURCE BOT DDOS üìà", callback_data="srcddos")
		spam = types.InlineKeyboardButton("üìä SOURCE BOT SPAM SMS üìä", callback_data="srcspam")
		taixiu = types.InlineKeyboardButton("üí† SOURCE BOT T√ÄI X·ªàU üí†", callback_data="srctaixiu")
		j97.add(taixiu)
		j97.add(ddos, spam)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚òï Ch·ªçn 1 source ‚òï:", reply_markup=j97)
	elif call.data == "srcddos":
		bot.send_document(call.message.chat.id, open("stable/src/ddos.zip", "rb"), caption="‚òï ƒê√¢y l√† source bot ddos c·ªßa b·∫°n ‚òï")
	elif call.data == "srcspam":
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí§ Sorry, nh∆∞ng m√† tui ch∆∞a th·ªÉ t√¨m th·∫•y src n√†o ngon nh∆∞ src bot ddos c·∫£ üí§")
	elif call.data == "srctaixiu":
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí§ Sorry, nh∆∞ng m√† tui ch∆∞a th·ªÉ t√¨m th·∫•y src n√†o ngon nh∆∞ src bot ddos c·∫£ üí§")
	if call.data == "sms":
		bot.send_document(call.message.chat.id, open("stable/sms/sms.py", "rb"), caption="üå¥ ƒê√¢y l√† file spam sms c·ªßa b·∫°n üå¥")
bot.polling()
